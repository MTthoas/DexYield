// Code √† ex√©cuter dans la console du navigateur (F12) sur la page lending

// Fonction pour r√©initialiser le yield
async function resetYieldData() {
    console.log("üîÑ Starting yield reset from browser console...");
    
    // V√©rifier que le wallet est connect√©
    if (!window.solana || !window.solana.isConnected) {
        console.error("‚ùå Wallet not connected!");
        return;
    }
    
    const userPublicKey = window.solana.publicKey;
    console.log("üë§ User wallet:", userPublicKey.toString());
    
    // Param√®tres pour SOL strategy
    const poolOwner = userPublicKey; // Vous √™tes le propri√©taire du pool
    const solMint = new PublicKey("So11111111111111111111111111111111111111112");
    const strategyId = 1;
    
    // Calculer la strategy PDA
    const strategySeeds = [
        Buffer.from("strategy"),
        solMint.toBuffer(),
        poolOwner.toBuffer(),
        new BN(strategyId).toArray('le', 8)
    ];
    
    const [strategyPDA] = PublicKey.findProgramAddressSync(
        strategySeeds,
        new PublicKey("BHByEUQjZokRDuBacssntFnQnWEsTnxe73B3ofhRTx1J")
    );
    
    console.log("üìç Strategy PDA:", strategyPDA.toString());
    
    try {
        // Utiliser la fonction resetUserYield du hook
        // Cette fonction devrait √™tre disponible dans le contexte React
        const result = await resetUserYield(poolOwner, strategyPDA);
        console.log("‚úÖ Reset successful! TX:", result);
        
        // Recharger la page pour voir les nouvelles donn√©es
        window.location.reload();
        
    } catch (error) {
        console.error("‚ùå Reset failed:", error);
        
        // Essayer d'utiliser directement le contract service si disponible
        if (window.contractService) {
            try {
                const result = await window.contractService.resetUserYield(
                    userPublicKey,
                    poolOwner,
                    strategyPDA
                );
                console.log("‚úÖ Reset successful via contract service! TX:", result);
                window.location.reload();
            } catch (contractError) {
                console.error("‚ùå Contract service also failed:", contractError);
            }
        }
    }
}

// Ex√©cuter la fonction
resetYieldData();